#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define NUM_THREADS 5
int shared_variable = 0;
pthread_mutex_t mutex;
void* threadFunction(void* arg) {
    int thread_id = *((int*)arg);
    int i;
    pthread_mutex_lock(&mutex);
    shared_variable++; 
    printf("Thread %d incremented the shared variable to %d\n", thread_id, shared_variable);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}
int main() {
    pthread_t threads[NUM_THREADS];
    int thread_ids[NUM_THREADS];
    int i;
    pthread_mutex_init(&mutex, NULL);
    for (i = 0; i < NUM_THREADS; i++) {
        thread_ids[i] = i;
        if (pthread_create(&threads[i], NULL, threadFunction, &thread_ids[i]) != 0) {
            fprintf(stderr, "Error creating thread\n");
            return 1;
        }
    }
    for (i = 0; i < NUM_THREADS; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            fprintf(stderr, "Error joining thread\n");
            return 1;
        }
    }
    pthread_mutex_destroy(&mutex);

    return 0;
}
